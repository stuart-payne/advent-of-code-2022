use std::collections::{HashMap, VecDeque};
use std::fs::File;
use std::io::{BufRead, BufReader, Lines};

const FILE_INPUT: &str = "./input.txt";
fn main() {
    println!("PART ONE: {}", part_one(FILE_INPUT));
}

fn part_one(file_input: &str) -> &str {
    let file = File::open(file_input).expect("WRONG PATH AGAIN SERIOUSLY WTF?!?!?");
    let first_pass = BufReader::new(&file)
        .lines()
        .map(|line| line.expect("error reading line"));
    let mut stacks: HashMap<char, VecDeque<char>> = HashMap::new();
    // build stacks
    let mut positions: Vec<(char, usize)> = Vec::new();

    for line in first_pass.filter(|x| x.starts_with(" 1")) {
        let mut position = 0;
        for c in line.chars() {
            if c.is_numeric() {
                positions.push((c, position));
            }
            position += 1;
        }
        break;
    }

    for (position, _) in positions.iter() {
        stacks.insert(*position, VecDeque::new());
    }

    let lines = BufReader::new(&file)
        .lines()
        .map(|line| line.expect("error reading line"));

    for line in lines {
        if line.starts_with(" 1") { break; }
        let chars: Vec<char> = line.chars().collect();
        for (character, position) in positions.iter() {
            stacks
                .get_mut(character)
                .expect("FAILED STACK LOOKUP")
                .push_back(*chars.get(*position).expect("FAILED INITING BOXES"));
        }
    }


    let instructions = BufReader::new(&file).lines().map(|line| line.expect("(:"));
    for instruction in instructions.filter(|x| x.starts_with('m')) {
        let mut hmm = instruction.chars().filter(|c| c.is_numeric());
        let amount = hmm.next().expect("?!?!?!?!!?").to_digit(10).expect("not a digit bruv");
        let from = hmm.next().expect("oh ffs");
        let to = hmm.next().expect("dear lord this is cursed");

        for _ in [0..amount] {
            stacks.get_mut(&from);
        }
    }
    "kdfjskl"
}

#[cfg(test)]
mod test {
    use crate::part_one;
    const TEST_INPUT: &str = "./input.txt";

    #[test]
    fn test_part_one() {
        assert_eq!(part_one(TEST_INPUT), "CMZ");
    }
}
